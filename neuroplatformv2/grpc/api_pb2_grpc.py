# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import api_pb2 as api__pb2
import stimparam_pb2 as stimparam__pb2

GRPC_GENERATED_VERSION = '1.64.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class IntanServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.start = channel.unary_unary(
                '/api.IntanService/start',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.stop = channel.unary_unary(
                '/api.IntanService/stop',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.startrecording = channel.unary_unary(
                '/api.IntanService/startrecording',
                request_serializer=api__pb2.SaveInfo.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.stoprecording = channel.unary_unary(
                '/api.IntanService/stoprecording',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.coefthresholds = channel.unary_unary(
                '/api.IntanService/coefthresholds',
                request_serializer=api__pb2.CoefThresholds.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.triggertags = channel.unary_unary(
                '/api.IntanService/triggertags',
                request_serializer=api__pb2.TriggersInfo.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.varthreshold = channel.unary_unary(
                '/api.IntanService/varthreshold',
                request_serializer=api__pb2.VarThresholds.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.expname = channel.unary_unary(
                '/api.IntanService/expname',
                request_serializer=api__pb2.ExpNames.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.streamhaar = channel.unary_stream(
                '/api.IntanService/streamhaar',
                request_serializer=api__pb2.ChannelsArray.SerializeToString,
                response_deserializer=api__pb2.FloatArrayChunk.FromString,
                _registered_method=True)
        self.stimparam = channel.unary_unary(
                '/api.IntanService/stimparam',
                request_serializer=stimparam__pb2.StimParam.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.updatestimparam = channel.unary_unary(
                '/api.IntanService/updatestimparam',
                request_serializer=api__pb2.ChannelsArray.SerializeToString,
                response_deserializer=api__pb2.StatusReply.FromString,
                _registered_method=True)
        self.count = channel.unary_unary(
                '/api.IntanService/count',
                request_serializer=api__pb2.DurationCount.SerializeToString,
                response_deserializer=api__pb2.CountArray.FromString,
                _registered_method=True)
        self.debuginfo = channel.unary_unary(
                '/api.IntanService/debuginfo',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.DebugInfo.FromString,
                _registered_method=True)


class IntanServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startrecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stoprecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def coefthresholds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def triggertags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def varthreshold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def expname(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamhaar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stimparam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updatestimparam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def count(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def debuginfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntanServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'startrecording': grpc.unary_unary_rpc_method_handler(
                    servicer.startrecording,
                    request_deserializer=api__pb2.SaveInfo.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'stoprecording': grpc.unary_unary_rpc_method_handler(
                    servicer.stoprecording,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'coefthresholds': grpc.unary_unary_rpc_method_handler(
                    servicer.coefthresholds,
                    request_deserializer=api__pb2.CoefThresholds.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'triggertags': grpc.unary_unary_rpc_method_handler(
                    servicer.triggertags,
                    request_deserializer=api__pb2.TriggersInfo.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'varthreshold': grpc.unary_unary_rpc_method_handler(
                    servicer.varthreshold,
                    request_deserializer=api__pb2.VarThresholds.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'expname': grpc.unary_unary_rpc_method_handler(
                    servicer.expname,
                    request_deserializer=api__pb2.ExpNames.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'streamhaar': grpc.unary_stream_rpc_method_handler(
                    servicer.streamhaar,
                    request_deserializer=api__pb2.ChannelsArray.FromString,
                    response_serializer=api__pb2.FloatArrayChunk.SerializeToString,
            ),
            'stimparam': grpc.unary_unary_rpc_method_handler(
                    servicer.stimparam,
                    request_deserializer=stimparam__pb2.StimParam.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'updatestimparam': grpc.unary_unary_rpc_method_handler(
                    servicer.updatestimparam,
                    request_deserializer=api__pb2.ChannelsArray.FromString,
                    response_serializer=api__pb2.StatusReply.SerializeToString,
            ),
            'count': grpc.unary_unary_rpc_method_handler(
                    servicer.count,
                    request_deserializer=api__pb2.DurationCount.FromString,
                    response_serializer=api__pb2.CountArray.SerializeToString,
            ),
            'debuginfo': grpc.unary_unary_rpc_method_handler(
                    servicer.debuginfo,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.DebugInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.IntanService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('api.IntanService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IntanService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/start',
            api__pb2.Empty.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/stop',
            api__pb2.Empty.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def startrecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/startrecording',
            api__pb2.SaveInfo.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stoprecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/stoprecording',
            api__pb2.Empty.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def coefthresholds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/coefthresholds',
            api__pb2.CoefThresholds.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def triggertags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/triggertags',
            api__pb2.TriggersInfo.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def varthreshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/varthreshold',
            api__pb2.VarThresholds.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def expname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/expname',
            api__pb2.ExpNames.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def streamhaar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/api.IntanService/streamhaar',
            api__pb2.ChannelsArray.SerializeToString,
            api__pb2.FloatArrayChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stimparam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/stimparam',
            stimparam__pb2.StimParam.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updatestimparam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/updatestimparam',
            api__pb2.ChannelsArray.SerializeToString,
            api__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/count',
            api__pb2.DurationCount.SerializeToString,
            api__pb2.CountArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def debuginfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.IntanService/debuginfo',
            api__pb2.Empty.SerializeToString,
            api__pb2.DebugInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
